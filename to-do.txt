TO DO

- Implement methods for simple level 0 (or 1?)
   - random move AI
   > estimated 2 hr - 1/18-1/21
- Implement controls to prevent illegal user moves and implement pieceNum (?) system
   > estimated 2 hr - 1/21
- Develop algorithms for different levels of difficulty
   > estimated 2 hr - 1/21-1/22
- Game display discussion
   > estimated 1 hr - 1/21-1/22
- Implement algorithms for levels
   > estimated ??? hr - 1/22-1/24
-- V1 COMPLETE?

- Improve game display
   > estimated 2 hr - 1/24
- Improve implementations
- readme.md
- Extras and final check
-- DONE

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Levels

Easy
- random move algorithm
- choose a random piece that has a possible move, choose a random direction to move in

Medium
- if there is a possible move to kill off an opponent's piece, implement this
- if no opponent pieces are near, move a random piece forward, starting with the pieces that are closest to the opposite side

Hard
- don't move the last row of chess pieces unless absolutely necessary
- other pieces move to form a pyramid
- get as many pieces to the opposite side
- should be based on user moves, to kill off user pieces and prevent user from reaching this side

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

http://stackoverflow.com/questions/18657121/program-to-create-shapes-and-show-them-on-console
https://docs.oracle.com/javase/7/docs/api/java/awt/geom/Ellipse2D.html
https://docs.oracle.com/javase/7/docs/api/java/awt/Graphics.html
http://docstore.mik.ua/orelly/java-ent/jfc/ch04_04.htm
https://docs.oracle.com/javase/7/docs/api/java/awt/Graphics2D.html
